#! /bin/sh

## uTorrent Server UserScript
## A script for users to control uTorrent Server
##  
## Version: 1.0
## 
## Developer: Prurigro
## Contact: prurigro at gmail dot com
##
## Distributed under the GPLv3; copies can be obtained on gnu.org @ http://www.gnu.org/copyleft/gpl.html

#Please update your configuration file to match any changes to locations, then restart utorrent when everything is saved
export utorrent_serverdir='/opt/utorrent-server' #The uTorrent Server installation directory location - This shouldn't need changing if you installed this as a package
export utorrent_confdir=$HOME'/.utorrent' #The uTorrent configuration directory
export utorrent_config='utserver.conf' #The uTorrent configuration file

function utorrent_CreateConf {
	#Write title
	echo "## uTorrent Server Configuration File - one 'setting: value' per line" > $utorrent_confdir\/$utorrent_config || return 1
	echo >> $utorrent_confdir\/$utorrent_config || return 1
	
	#Write helpful tips
	echo "## The majority of settings are only read from the config file when settings.dat does not exist." >> $utorrent_confdir\/$utorrent_config || return 1
	echo "## Remove sensitive information like admin_name/admin_password once settings.dat has been formed." >> $utorrent_confdir\/$utorrent_config || return 1
	echo "## Settings read from the config file every time: dir_request, disk_cache_max_size, finish_cmd, logmask, preferred_interface, state_cmd, ut_webui_dir." >> $utorrent_confdir\/$utorrent_config || return 1
	echo >> $utorrent_confdir\/$utorrent_config || return 1
	
	#Write internal settings
	echo "## Internal Settings" >> $utorrent_confdir\/$utorrent_config || return 1
	echo "#bind_ip: (string)" >> $utorrent_confdir\/$utorrent_config || return 1
	echo "#ut_webui_port: (integer)" >> $utorrent_confdir\/$utorrent_config || return 1
	echo "#token_auth_enable: (boolean)" >> $utorrent_confdir\/$utorrent_config || return 1
	echo "#dir_active: (string)" >> $utorrent_confdir\/$utorrent_config || return 1
	echo "#dir_completed: (string)" >> $utorrent_confdir\/$utorrent_config || return 1
	echo "#dir_download: (string)" >> $utorrent_confdir\/$utorrent_config || return 1
	echo "#dir_torrent_files: (string)" >> $utorrent_confdir\/$utorrent_config || return 1
	# Begin dir_temp_files
	echo -n "dir_temp_files: " >> $utorrent_confdir\/$utorrent_config || return 1
	echo -n $utorrent_confdir >> $utorrent_confdir\/$utorrent_config || return 1
	echo "/temp_files" >> $utorrent_confdir\/$utorrent_config || return 1
	# End dir_temp_files
	echo "#dir_autoload: (string)" >> $utorrent_confdir\/$utorrent_config || return 1
	echo "#dir_autoload_delete: (boolean)" >> $utorrent_confdir\/$utorrent_config || return 1
	# Begin dir_request
	echo -n "dir_request: " >> $utorrent_confdir\/$utorrent_config || return 1
	echo -n $utorrent_confdir >> $utorrent_confdir\/$utorrent_config || return 1
	echo "/request" >> $utorrent_confdir\/$utorrent_config || return 1
	# End dir_request
	echo "#upnp: (boolean)" >> $utorrent_confdir\/$utorrent_config || return 1
	echo "#natpmp: (boolean)" >> $utorrent_confdir\/$utorrent_config || return 1
	echo "#lsd: (boolean)" >> $utorrent_confdir\/$utorrent_config || return 1
	echo "#dht: (boolean)" >> $utorrent_confdir\/$utorrent_config || return 1
	echo "#pex: (boolean)" >> $utorrent_confdir\/$utorrent_config || return 1
	echo "#rate_limit_local_peers: (boolean)" >> $utorrent_confdir\/$utorrent_config || return 1
	echo "#dir_root: (string)" >> $utorrent_confdir\/$utorrent_config || return 1
	echo "#disk_cache_max_size: (integer)" >> $utorrent_confdir\/$utorrent_config || return 1
	echo "#preferred_interface: (string)" >> $utorrent_confdir\/$utorrent_config || return 1
	echo "#admin_name: (string)" >> $utorrent_confdir\/$utorrent_config || return 1
	echo "#admin_password: (string)" >> $utorrent_confdir\/$utorrent_config || return 1
	echo "#logmask: (integer)" >> $utorrent_confdir\/$utorrent_config || return 1
	# Begin webui
	echo -n "ut_webui_dir: " >> $utorrent_confdir\/$utorrent_config || return 1
	echo $utorrent_serverdir >> $utorrent_confdir\/$utorrent_config || return 1
	# End webui
	echo "#finish_cmd: (string)" >> $utorrent_confdir\/$utorrent_config || return 1
	echo "#state_cmd: (string)" >> $utorrent_confdir\/$utorrent_config || return 1
	echo >> $utorrent_confdir\/$utorrent_config || return 1
	
	#Write regular settings
	echo "## Regular Settings" >> $utorrent_confdir\/$utorrent_config || return 1
	echo "#bind_port: (integer)" >> $utorrent_confdir\/$utorrent_config || return 1
	echo "#max_ul_rate: (integer)" >> $utorrent_confdir\/$utorrent_config || return 1
	echo "#max_ul_rate_seed: (integer)" >> $utorrent_confdir\/$utorrent_config || return 1
	echo "#conns_per_torrent: (integer)" >> $utorrent_confdir\/$utorrent_config || return 1
	echo "#max_total_connections: (integer)" >> $utorrent_confdir\/$utorrent_config || return 1
	echo "#auto_bandwidth_management: (boolean)" >> $utorrent_confdir\/$utorrent_config || return 1
	echo "#max_dl_rate: (integer)" >> $utorrent_confdir\/$utorrent_config || return 1
	echo "#seed_ratio: (integer)" >> $utorrent_confdir\/$utorrent_config || return 1
	echo "#seed_time: (integer)" >> $utorrent_confdir\/$utorrent_config || return 1
	
	return 0
}

function utorrent_CheckExist {	
	#Create config directory if it doesn't exist
	if [ ! -d $utorrent_confdir ]; then
		echo "Creating config directory @ "$utorrent_confdir
		install -d $utorrent_confdir || (export utorrent_error="cannot create config directory @"\ $utorrent_confdir; return 1)
	fi
	
	#Create temp_files directory if it doesn't exist
	if [ ! -d $utorrent_confdir\/temp_files ]; then
		echo "Creating temp_files directory @ "$utorrent_confdir\/temp_files
		install -d $utorrent_confdir\/temp_files || (export utorrent_error="cannot create temp_files directory @"\ $utorrent_confdir\/temp_files; return 1)
	fi
	
	#Create request directory if it doesn't exist
	if [ ! -d $utorrent_confdir\/request ]; then
		echo "Creating request directory @ "$utorrent_confdir\/request
		install -d $utorrent_confdir\/request || (export utorrent_error="cannot create request directory @"\ $utorrent_confdir\/request; return 1)
	fi
	
	#Create settings file if it doens't exist
	if [ ! -f $utorrent_confdir/$utorrent_config ]; then
		echo "Creating configuration file..."
		utorrent_CreateConf || (export utorrent_error="cannot create config file @"\ $utorrent_confdir\/$utorrent_config; return 1)
		echo "Complete @ "$utorrent_confdir\/$utorrent_config"! Please edit before starting utorrent"
		exit 0
	fi
	
	return 0
}

function utorrent_Start {
	if [ ! $(ps -A | grep utserver -c) = 0 ]; then
		export utorrent_error="utserver is already running"; return 1
	fi
	
	utorrent_CheckExist || return 1
	$utorrent_serverdir/utserver -configfile $utorrent_confdir/$utorrent_config -settingspath $utorrent_confdir -daemon > /dev/null 2>&1 || (export utorrent_error="utserver could not be started"; return 1)
}

function utorrent_Stop {
	if [ $(ps -A | grep utserver -c) = 0 ]; then
		utorrent_error="utserver is not running"; return 1
	fi
	
	export utserver_pid=$(ps -A | grep utserver | awk '{ print $1 }')
	kill $utserver_pid || (export utorrent_error="utserver could not be killed"; return 1)
	while [ ! $(ps -A | grep $utserver_pid -c) = 0 ] ; do
		wait
	done
}

function utorrent_Restart {
	utorrent_Stop || return 1
	utorrent_Start || return 1
}

if [ "$1" = "start" ]; then
	utorrent_Start && (echo "utorrent has started"; exit 0) || (echo Error:\ $utorrent_error; exit 1)
elif [ "$1" = "stop" ]; then
	utorrent_Stop && (echo "utorrent has stopped"; exit 0) || (echo Error:\ $utorrent_error; exit 1)
elif [ "$1" = "restart" ]; then
	utorrent_Restart && (echo "utorrent has restarted"; exit 0) || (echo Error:\ $utorrent_error; exit 1)
else
	echo "usage: utorrent {start|stop|restart}"
fi
